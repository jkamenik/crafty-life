// Generated by CoffeeScript 1.7.1
var Game;

Game = {
  cellSize: 100,
  cells: [],
  cellRows: function() {
    return Math.floor(this.height / this.cellSize);
  },
  cellColumns: function() {
    return Math.floor(this.width / this.cellSize);
  },
  register: function(x, y, cell) {
    var _base;
    (_base = this.cells)[x] || (_base[x] = []);
    return this.cells[x][y] = cell;
  },
  cellAt: function(x, y) {
    return this.cells[x][y];
  },
  advance: function() {
    var cell, container, _i, _len, _ref, _results;
    _ref = Game.cells;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      container = _ref[_i];
      _results.push((function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (_j = 0, _len1 = container.length; _j < _len1; _j++) {
          cell = container[_j];
          _results1.push(cell.calcNextState());
        }
        return _results1;
      })());
    }
    return _results;
  },
  reDraw: function() {
    var cell, container, _i, _len, _ref, _results;
    _ref = Game.cells;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      container = _ref[_i];
      _results.push((function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (_j = 0, _len1 = container.length; _j < _len1; _j++) {
          cell = container[_j];
          _results1.push(cell.reRender());
        }
        return _results1;
      })());
    }
    return _results;
  },
  neighborsOf: function(x, y) {
    var bottomIndex, leftIndex, neighbors, rightIndex, topIndex;
    neighbors = [];
    topIndex = y - 1;
    leftIndex = x - 1;
    rightIndex = x + 1;
    bottomIndex = y + 1;
    if (topIndex < 0) {
      topIndex = null;
    }
    if (leftIndex < 0) {
      leftIndex = null;
    }
    if (rightIndex >= this.cellColumns()) {
      rightIndex = null;
    }
    if (bottomIndex >= this.cellRows()) {
      bottomIndex = null;
    }
    if (topIndex !== null) {
      if (leftIndex !== null) {
        neighbors.push(this.cellAt(leftIndex, topIndex));
      }
      neighbors.push(this.cellAt(x, topIndex));
      if (rightIndex !== null) {
        neighbors.push(this.cellAt(rightIndex, topIndex));
      }
    }
    if (leftIndex !== null) {
      neighbors.push(this.cellAt(leftIndex, y));
    }
    if (rightIndex !== null) {
      neighbors.push(this.cellAt(rightIndex, y));
    }
    if (bottomIndex !== null) {
      if (leftIndex !== null) {
        neighbors.push(this.cellAt(leftIndex, bottomIndex));
      }
      neighbors.push(this.cellAt(x, bottomIndex));
      if (rightIndex !== null) {
        neighbors.push(this.cellAt(rightIndex, bottomIndex));
      }
    }
    return neighbors;
  }
};
